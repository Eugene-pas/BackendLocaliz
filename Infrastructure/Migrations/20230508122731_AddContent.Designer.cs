// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508122731_AddContent")]
    partial class AddContent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.ContentEntity.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslateText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FinishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56975a9c-c590-4324-a04a-c5ce6dc0335f",
                            ConcurrencyStamp = "56975a9c-c590-4324-a04a-c5ce6dc0335f",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "63bdd2f0-2d81-444e-aa52-fbfb5a74c7f2",
                            ConcurrencyStamp = "63bdd2f0-2d81-444e-aa52-fbfb5a74c7f2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e0dd0771-57a4-4eb4-aa6f-2dcaa5f3fe7e",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "9111842c-ac00-4f78-961a-350ab59f3a0c",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "e64b20fa-6ec3-4245-bcb6-9264a810d024",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "ff488499-ed60-4381-a1d1-1adced6b5e82",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "36e64350-6379-4b15-b2ef-dbc4e6e18ed4",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "7b61f66e-8b8c-4b0e-8403-eb6810bbf0ac",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        },
                        new
                        {
                            UserId = "16558e6c-5ecd-44b6-ad29-247232bd6903",
                            RoleId = "56975a9c-c590-4324-a04a-c5ce6dc0335f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ConfirmationEmailToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "e0dd0771-57a4-4eb4-aa6f-2dcaa5f3fe7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f297eb0-e020-479c-a096-5562426fbba7",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyhqQR6i/0WgNDom6RqZJVM8O17dEYbAJUheouObHNQp4pe7ZAj3KExmEFy/oDpmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7c3fca5-e860-45dc-b50a-499a7126cd06",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(4977), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "9111842c-ac00-4f78-961a-350ab59f3a0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba7395d9-1755-4676-81f2-1f12a8790c76",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELAg5H6Q/lI6y2AZvQUNV5puKkfxqnb3rEgG7S/ymlJ4WbL0EhZWlG48VHTTPlKP0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "029adab5-8bf1-4985-bd51-397d5e6d64c8",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(4993), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sievostyanov"
                        },
                        new
                        {
                            Id = "35086e20-69d2-4488-bd68-c5a510fdd45e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "851dabfe-fb86-4aeb-8b9b-417a0b12b10d",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPkONQvPiJrMYr7oRQQL8CEwjOmd469VDUwiCq42cu/HvJ4uCHsvUPRWTK/ToveAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5b20984-6049-475d-812c-462cf7312810",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5002), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "ff488499-ed60-4381-a1d1-1adced6b5e82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f743bb59-ab27-433a-b45d-ea9141bc0f95",
                            Email = "mapourse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAPOURSE@GMAIL.COM",
                            NormalizedUserName = "MAPOURSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUBfxi52jqB1IrC7D96P1AKh6E9HQARAxq0QWPlAmoeTfueVn7o92NBMcsPi6RTnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc47efb2-0528-4f09-92b5-a40c27fb9b23",
                            TwoFactorEnabled = false,
                            UserName = "mapourse@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5013), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "7b61f66e-8b8c-4b0e-8403-eb6810bbf0ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d0ba3c-117e-4c67-a72d-d59c6850f2ee",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEfDjsXbSNzu+UCtyq5EXMUdKcj+KlLxL5pkvzbdd08Ft23e9z/Pjg4VIazR9PT+7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bedfd3c7-0f74-4a88-a48d-6e158b9c7b63",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5022), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "e64b20fa-6ec3-4245-bcb6-9264a810d024",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20b0a0d9-af82-45ed-8699-9650f1956104",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzTSUyJ0+KQEay1PhD7VRZpXPD6CsBtaBiKJBP1tGv5DRPEL69z6I/o5b0xEfkQPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ecc4224-79bd-41f8-9eba-e595cdd9d23b",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5030), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "36e64350-6379-4b15-b2ef-dbc4e6e18ed4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bc5cc49-2729-4957-b236-e150f1ba9fa8",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAnF74+kw89lKujR1+GuNYWh7vdtpZteJzjYo4j9rn6zdW46EYxy9WtYYI1MTykxNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faf1ddb9-090b-42ee-832d-a5f3fb90bbd7",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5040), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "16558e6c-5ecd-44b6-ad29-247232bd6903",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a765f4ba-4f12-4a77-bce3-626a995a9b6c",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJdonKA1Obi9x2yFRooXi/9Evn0FPkk2uk/OGTdIoLmvHwfNOLX70n1Ix/GZwPkGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed32ca9a-2798-4b54-8384-657f44bd0d2c",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 5, 8, 12, 27, 31, 293, DateTimeKind.Unspecified).AddTicks(5048), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.ContentEntity.Content", b =>
                {
                    b.HasOne("Core.Entities.DocumentEntity.Document", "Document")
                        .WithMany("Contents")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Contents")
                        .HasForeignKey("UserId");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.HasOne("Core.Entities.ContentEntity.Content", "Content")
                        .WithMany("Histories")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("ProjectUser")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("ProjectUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ContentEntity.Content", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Histories");

                    b.Navigation("ProjectUser");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
