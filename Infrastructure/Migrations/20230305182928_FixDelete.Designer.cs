// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230305182928_FixDelete")]
    partial class FixDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslateText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FinishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b00aebe5-a5f4-480b-b607-52b234081e5e",
                            ConcurrencyStamp = "b00aebe5-a5f4-480b-b607-52b234081e5e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cbeb8b04-446a-4e07-9c1e-6c53329b1978",
                            ConcurrencyStamp = "cbeb8b04-446a-4e07-9c1e-6c53329b1978",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "be1792b7-8292-4fdd-bbd4-2a5b3d7202af",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "9cc8acf2-2286-4a02-9943-ebf2843d1756",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "d1a6d0b8-0087-4bd7-911c-090af2910cfe",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "0c412794-c9af-4ca9-a8b8-7cf16c0afd46",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "a8624235-eaba-46dc-a12c-fa07cce18295",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "ed195f85-4d97-4ff9-8c55-c3d4d41edfd5",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        },
                        new
                        {
                            UserId = "80b1c072-2c3e-45c7-91c6-9020ff9f3f40",
                            RoleId = "b00aebe5-a5f4-480b-b607-52b234081e5e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ConfirmationEmailToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "be1792b7-8292-4fdd-bbd4-2a5b3d7202af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3a9ba44-d8ac-475b-bb6f-e1c9f92b81fe",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEILI+H6r6KaaUain/dhY4xHAP46NTbCYuzZWn0qKAOY+iciYWPmvk+ePFvDfVPRTSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f312be24-fcf1-4886-a3a3-49665e2fc9ae",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8264), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "9cc8acf2-2286-4a02-9943-ebf2843d1756",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e8e34b1-c68f-4495-ae50-8c4a1ff6a097",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzDGK6qqufXMRHXf/wKaiIR7f7oMcuDAtXg1TMcajrkpLMwpoEBYKJI2l7KFm9HRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0b77299-2b23-4046-972e-614557e09f84",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8290), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sievostyanov"
                        },
                        new
                        {
                            Id = "1a645399-fe2a-432d-bdb5-95ac327f9cea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b09aff7-78b3-4cc0-85bf-0b8da5059705",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjVwF774L7LfHFIsUGQn+UKD/vG6quI9+2fj7pcFgkTVt04IqUx35ljiwMwbolyPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "140b4ca5-d407-44d3-a9de-91fb3f5629de",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8299), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "0c412794-c9af-4ca9-a8b8-7cf16c0afd46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "456b0f02-ea2e-41e1-8f49-7f126765e4a6",
                            Email = "mapourse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAPOURSE@GMAIL.COM",
                            NormalizedUserName = "MAPOURSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUpz7yKu77sf7lwtFNhvW1ihU/i7FyubQ3rmdl6w1x1plwvWwAZJTbfXh1Hk9aQ1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d83f1149-1622-4791-afea-bbc3bdb93131",
                            TwoFactorEnabled = false,
                            UserName = "mapourse@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8307), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "ed195f85-4d97-4ff9-8c55-c3d4d41edfd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fef2921-5a4a-45c5-8fed-2e9731b46b85",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOH4RzcIXffhQ6FIiPVYeVHq1a9wydAmglKiPuakMCmGD11aXIgTRzzSzq61LwMMew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4ee6919-4c5e-43dc-b266-2b1b609d9fee",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8318), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "d1a6d0b8-0087-4bd7-911c-090af2910cfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97052a4b-a5d5-4c89-a3cc-7001110383a4",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6thMG52XD7iYFso7nIYJKITKn8WPKaApiV3b4rN5Ni8P7DoAX8vPCws+je1wSXnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ea17917-0723-4dcd-98ac-e13bc2aa66aa",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8325), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "a8624235-eaba-46dc-a12c-fa07cce18295",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8a58ca8-1d19-4c08-9a80-9059c12db38d",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBI5LbFBzGtTN5TKps6+1hmpTqyr/g74p2Zk0JcZb02BHMaC39GL23iKnfb+aR7Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfe588fd-31b7-4144-a5c8-796735c080d7",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8335), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "80b1c072-2c3e-45c7-91c6-9020ff9f3f40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a702345-d004-4f3c-b51b-a94e1a9505f7",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOenEG7Ldi6Gx/NyoasgGfQkv0VgkZMtFV4pbsTK2sxAWQ5T0Ao9E0JSTc4xgFe3mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6dcf2ed-09fc-4862-b94c-8a27e14a9266",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2023, 3, 5, 18, 29, 28, 518, DateTimeKind.Unspecified).AddTicks(8343), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.HasOne("Core.Entities.DocumentEntity.Document", "Document")
                        .WithMany("Histories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("ProjectUser")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("ProjectUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ProjectUser");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
