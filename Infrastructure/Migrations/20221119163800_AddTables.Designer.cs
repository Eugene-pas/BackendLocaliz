// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221119163800_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslateText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FinishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToTranslate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27e587d2-c9af-421b-b74d-7e7064fbcf32",
                            ConcurrencyStamp = "27e587d2-c9af-421b-b74d-7e7064fbcf32",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "1b5bf462-3b06-40da-896a-26a3289adc74",
                            ConcurrencyStamp = "1b5bf462-3b06-40da-896a-26a3289adc74",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d1e82f2e-2ee5-4db4-8ffc-19608be9071d",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "d944f498-f940-4e4c-ac03-ac6beb5e7ff3",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "14e7b52a-aec2-43bc-83d3-08249c7aa1dc",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "24f90856-769d-46c5-94b4-4f41c7b43f1d",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "34ffea3f-aea4-46ab-b3b4-9eac8be940bb",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "04dafb4d-8af5-4dce-91f6-795f86dc896c",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        },
                        new
                        {
                            UserId = "d7dced28-953e-4d47-8bfb-5473c26d0659",
                            RoleId = "27e587d2-c9af-421b-b74d-7e7064fbcf32"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ConfirmationEmailToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "d1e82f2e-2ee5-4db4-8ffc-19608be9071d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc7f8266-2bb2-489b-a386-a1f284d9326c",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO55GUCXEzF4rwKDOxaMNde1BuYNRAr4FJ58hnNbijcumwdDdlW7DNG2L3sIAMknYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cf5bb96-a442-4e71-9113-6644df60eaa6",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(6988), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "d944f498-f940-4e4c-ac03-ac6beb5e7ff3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "febb2472-3a29-41a0-ba72-701d7c437193",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEANvIctVVcgYKLmLl/NFo7EK150jwPyVKUEDE4SUR8s7t1lUw89RJ4HSh5eMqanQ9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a926588-f90c-4c87-8869-d6e892f9b7f6",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7001), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sievostyanov"
                        },
                        new
                        {
                            Id = "8d7ba3ab-e676-4f3d-a1aa-d9d484f2d0cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2adf3c54-369d-4960-a876-afa9f42d083f",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH/9jDNsM+Nz/+bV6+6tqpSkYd8lpYUjSzCbfgMyDQITZ9FLIpc9y+R2g/qbrmlc2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ca4b5e1-082b-4845-8864-bf5281bddb5e",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7012), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "24f90856-769d-46c5-94b4-4f41c7b43f1d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a68b1123-391c-4b04-9d0f-435a980161fe",
                            Email = "mapourse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAPOURSE@GMAIL.COM",
                            NormalizedUserName = "MAPOURSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0vWMI6GON+VnvzZMLDiK0UNUmX9go1XdK9/Y4pPI6L5YLHz7x2QrPzExWWboC04w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29c17d01-46a8-44ca-82fa-9835cf544366",
                            TwoFactorEnabled = false,
                            UserName = "mapourse@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7020), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "04dafb4d-8af5-4dce-91f6-795f86dc896c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1e6290b-5f9a-4f3c-8133-b4ddc1e98817",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7ISe6zaYw0ZuVo+RDGohahhHYlblMffunBJvSEDzjCDwuNmLasIQQI3tbNtaQADg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a48b0d1-fd51-4b50-9c08-1dd720a21d73",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7027), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "14e7b52a-aec2-43bc-83d3-08249c7aa1dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "106b5f7d-f733-43f5-8ae5-bf168c73cbd8",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGotg8aYFgC23vkoOUPoO7AJWzKDEm/yfbyNzGEkwleQjTk8I0oghzrkYxdIkTsArQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd20779b-58ad-4a15-88b3-139372d79332",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7037), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "34ffea3f-aea4-46ab-b3b4-9eac8be940bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62ac16d2-a379-43de-bc2b-df040845ed75",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEA55NeDvcluNWRKPCWSBoxgL32JNunDAEtH8t05KWI6Uha6VRhr9LPB9MVuj4UxdSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16412fcc-317f-41ea-b3e6-017384f1c3d4",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            ConfirmationEmailToken = "",
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7044), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "d7dced28-953e-4d47-8bfb-5473c26d0659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18efd2f6-ff70-4d24-86c3-940328ad1150",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGq+8B9fO8fvY3pKkLyrc1Zp9mlCEjgN+WRFP0M40Rs3jgSsMkCbvdmVXqt+QSQd/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c04d9b79-5679-4537-a146-8b4f06b64728",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            ConfirmationEmailToken = "",
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 11, 19, 16, 37, 59, 791, DateTimeKind.Unspecified).AddTicks(7053), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entities.HistoryEntity.History", b =>
                {
                    b.HasOne("Core.Entities.DocumentEntity.Document", "Document")
                        .WithMany("Histories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ProjectUserEntity.ProjectUser", b =>
                {
                    b.HasOne("Core.Entities.ProjectEntity.Project", "Project")
                        .WithMany("ProjectUser")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("ProjectUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.DocumentEntity.Document", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Core.Entities.ProjectEntity.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ProjectUser");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ProjectUser");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
